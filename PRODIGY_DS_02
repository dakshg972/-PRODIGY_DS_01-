{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyN4NFP3nXcGcMpcFDBriOzd",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/dakshg972/-PRODIGY_DS_01-/blob/main/PRODIGY_DS_02\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 1,
      "metadata": {
        "id": "lkicH9eDIUCv"
      },
      "outputs": [],
      "source": [
        "import numpy as np\n",
        "import pandas as pd\n",
        "import matplotlib.pyplot as plt\n",
        "import seaborn as sns\n",
        "import warnings\n",
        "warnings.filterwarnings('ignore')"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df = pd.read_csv('/content/train.csv')\n",
        "df1 = pd.read_csv('/content/test.csv')"
      ],
      "metadata": {
        "id": "0YwoL96dJZnH"
      },
      "execution_count": 2,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "df"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 649
        },
        "id": "xr5feP6j_cSE",
        "outputId": "a685efbb-defe-4c24-e812-d22c69c48ef6"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "     PassengerId  Survived  Pclass  \\\n",
              "0              1         0       3   \n",
              "1              2         1       1   \n",
              "2              3         1       3   \n",
              "3              4         1       1   \n",
              "4              5         0       3   \n",
              "..           ...       ...     ...   \n",
              "886          887         0       2   \n",
              "887          888         1       1   \n",
              "888          889         0       3   \n",
              "889          890         1       1   \n",
              "890          891         0       3   \n",
              "\n",
              "                                                  Name     Sex   Age  SibSp  \\\n",
              "0                              Braund, Mr. Owen Harris    male  22.0      1   \n",
              "1    Cumings, Mrs. John Bradley (Florence Briggs Th...  female  38.0      1   \n",
              "2                               Heikkinen, Miss. Laina  female  26.0      0   \n",
              "3         Futrelle, Mrs. Jacques Heath (Lily May Peel)  female  35.0      1   \n",
              "4                             Allen, Mr. William Henry    male  35.0      0   \n",
              "..                                                 ...     ...   ...    ...   \n",
              "886                              Montvila, Rev. Juozas    male  27.0      0   \n",
              "887                       Graham, Miss. Margaret Edith  female  19.0      0   \n",
              "888           Johnston, Miss. Catherine Helen \"Carrie\"  female   NaN      1   \n",
              "889                              Behr, Mr. Karl Howell    male  26.0      0   \n",
              "890                                Dooley, Mr. Patrick    male  32.0      0   \n",
              "\n",
              "     Parch            Ticket     Fare Cabin Embarked  \n",
              "0        0         A/5 21171   7.2500   NaN        S  \n",
              "1        0          PC 17599  71.2833   C85        C  \n",
              "2        0  STON/O2. 3101282   7.9250   NaN        S  \n",
              "3        0            113803  53.1000  C123        S  \n",
              "4        0            373450   8.0500   NaN        S  \n",
              "..     ...               ...      ...   ...      ...  \n",
              "886      0            211536  13.0000   NaN        S  \n",
              "887      0            112053  30.0000   B42        S  \n",
              "888      2        W./C. 6607  23.4500   NaN        S  \n",
              "889      0            111369  30.0000  C148        C  \n",
              "890      0            370376   7.7500   NaN        Q  \n",
              "\n",
              "[891 rows x 12 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-41090b6a-f14b-4dce-9bba-b1d1fc3eb074\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>PassengerId</th>\n",
              "      <th>Survived</th>\n",
              "      <th>Pclass</th>\n",
              "      <th>Name</th>\n",
              "      <th>Sex</th>\n",
              "      <th>Age</th>\n",
              "      <th>SibSp</th>\n",
              "      <th>Parch</th>\n",
              "      <th>Ticket</th>\n",
              "      <th>Fare</th>\n",
              "      <th>Cabin</th>\n",
              "      <th>Embarked</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>3</td>\n",
              "      <td>Braund, Mr. Owen Harris</td>\n",
              "      <td>male</td>\n",
              "      <td>22.0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>A/5 21171</td>\n",
              "      <td>7.2500</td>\n",
              "      <td>NaN</td>\n",
              "      <td>S</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>2</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>Cumings, Mrs. John Bradley (Florence Briggs Th...</td>\n",
              "      <td>female</td>\n",
              "      <td>38.0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>PC 17599</td>\n",
              "      <td>71.2833</td>\n",
              "      <td>C85</td>\n",
              "      <td>C</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>3</td>\n",
              "      <td>1</td>\n",
              "      <td>3</td>\n",
              "      <td>Heikkinen, Miss. Laina</td>\n",
              "      <td>female</td>\n",
              "      <td>26.0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>STON/O2. 3101282</td>\n",
              "      <td>7.9250</td>\n",
              "      <td>NaN</td>\n",
              "      <td>S</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>4</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>Futrelle, Mrs. Jacques Heath (Lily May Peel)</td>\n",
              "      <td>female</td>\n",
              "      <td>35.0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>113803</td>\n",
              "      <td>53.1000</td>\n",
              "      <td>C123</td>\n",
              "      <td>S</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>5</td>\n",
              "      <td>0</td>\n",
              "      <td>3</td>\n",
              "      <td>Allen, Mr. William Henry</td>\n",
              "      <td>male</td>\n",
              "      <td>35.0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>373450</td>\n",
              "      <td>8.0500</td>\n",
              "      <td>NaN</td>\n",
              "      <td>S</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>886</th>\n",
              "      <td>887</td>\n",
              "      <td>0</td>\n",
              "      <td>2</td>\n",
              "      <td>Montvila, Rev. Juozas</td>\n",
              "      <td>male</td>\n",
              "      <td>27.0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>211536</td>\n",
              "      <td>13.0000</td>\n",
              "      <td>NaN</td>\n",
              "      <td>S</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>887</th>\n",
              "      <td>888</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>Graham, Miss. Margaret Edith</td>\n",
              "      <td>female</td>\n",
              "      <td>19.0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>112053</td>\n",
              "      <td>30.0000</td>\n",
              "      <td>B42</td>\n",
              "      <td>S</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>888</th>\n",
              "      <td>889</td>\n",
              "      <td>0</td>\n",
              "      <td>3</td>\n",
              "      <td>Johnston, Miss. Catherine Helen \"Carrie\"</td>\n",
              "      <td>female</td>\n",
              "      <td>NaN</td>\n",
              "      <td>1</td>\n",
              "      <td>2</td>\n",
              "      <td>W./C. 6607</td>\n",
              "      <td>23.4500</td>\n",
              "      <td>NaN</td>\n",
              "      <td>S</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>889</th>\n",
              "      <td>890</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>Behr, Mr. Karl Howell</td>\n",
              "      <td>male</td>\n",
              "      <td>26.0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>111369</td>\n",
              "      <td>30.0000</td>\n",
              "      <td>C148</td>\n",
              "      <td>C</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>890</th>\n",
              "      <td>891</td>\n",
              "      <td>0</td>\n",
              "      <td>3</td>\n",
              "      <td>Dooley, Mr. Patrick</td>\n",
              "      <td>male</td>\n",
              "      <td>32.0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>370376</td>\n",
              "      <td>7.7500</td>\n",
              "      <td>NaN</td>\n",
              "      <td>Q</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>891 rows × 12 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-41090b6a-f14b-4dce-9bba-b1d1fc3eb074')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-41090b6a-f14b-4dce-9bba-b1d1fc3eb074 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-41090b6a-f14b-4dce-9bba-b1d1fc3eb074');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-682c41ca-174e-4a72-a341-4abe4505b552\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-682c41ca-174e-4a72-a341-4abe4505b552')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-682c41ca-174e-4a72-a341-4abe4505b552 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "  <div id=\"id_60d743aa-0ce1-4d0d-bcf3-366153090d41\">\n",
              "    <style>\n",
              "      .colab-df-generate {\n",
              "        background-color: #E8F0FE;\n",
              "        border: none;\n",
              "        border-radius: 50%;\n",
              "        cursor: pointer;\n",
              "        display: none;\n",
              "        fill: #1967D2;\n",
              "        height: 32px;\n",
              "        padding: 0 0 0 0;\n",
              "        width: 32px;\n",
              "      }\n",
              "\n",
              "      .colab-df-generate:hover {\n",
              "        background-color: #E2EBFA;\n",
              "        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "        fill: #174EA6;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate {\n",
              "        background-color: #3B4455;\n",
              "        fill: #D2E3FC;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate:hover {\n",
              "        background-color: #434B5C;\n",
              "        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "        fill: #FFFFFF;\n",
              "      }\n",
              "    </style>\n",
              "    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('df')\"\n",
              "            title=\"Generate code using this dataframe.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "    <script>\n",
              "      (() => {\n",
              "      const buttonEl =\n",
              "        document.querySelector('#id_60d743aa-0ce1-4d0d-bcf3-366153090d41 button.colab-df-generate');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      buttonEl.onclick = () => {\n",
              "        google.colab.notebook.generateWithVariable('df');\n",
              "      }\n",
              "      })();\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "df",
              "summary": "{\n  \"name\": \"df\",\n  \"rows\": 891,\n  \"fields\": [\n    {\n      \"column\": \"PassengerId\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 257,\n        \"min\": 1,\n        \"max\": 891,\n        \"num_unique_values\": 891,\n        \"samples\": [\n          710,\n          440,\n          841\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Survived\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          1,\n          0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Pclass\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 1,\n        \"max\": 3,\n        \"num_unique_values\": 3,\n        \"samples\": [\n          3,\n          1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Name\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 891,\n        \"samples\": [\n          \"Moubarek, Master. Halim Gonios (\\\"William George\\\")\",\n          \"Kvillner, Mr. Johan Henrik Johannesson\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Sex\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          \"female\",\n          \"male\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Age\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 14.526497332334042,\n        \"min\": 0.42,\n        \"max\": 80.0,\n        \"num_unique_values\": 88,\n        \"samples\": [\n          0.75,\n          22.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"SibSp\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1,\n        \"min\": 0,\n        \"max\": 8,\n        \"num_unique_values\": 7,\n        \"samples\": [\n          1,\n          0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Parch\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 6,\n        \"num_unique_values\": 7,\n        \"samples\": [\n          0,\n          1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Ticket\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 681,\n        \"samples\": [\n          \"11774\",\n          \"248740\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Fare\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 49.6934285971809,\n        \"min\": 0.0,\n        \"max\": 512.3292,\n        \"num_unique_values\": 248,\n        \"samples\": [\n          11.2417,\n          51.8625\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Cabin\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 147,\n        \"samples\": [\n          \"D45\",\n          \"B49\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Embarked\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 3,\n        \"samples\": [\n          \"S\",\n          \"C\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 5
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df1"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 510
        },
        "id": "pnlV21Hx_fEX",
        "outputId": "ac65e485-bf53-4391-976b-e8fd77ed00fe"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "     PassengerId  Pclass                                          Name  \\\n",
              "0            892       3                              Kelly, Mr. James   \n",
              "1            893       3              Wilkes, Mrs. James (Ellen Needs)   \n",
              "2            894       2                     Myles, Mr. Thomas Francis   \n",
              "3            895       3                              Wirz, Mr. Albert   \n",
              "4            896       3  Hirvonen, Mrs. Alexander (Helga E Lindqvist)   \n",
              "..           ...     ...                                           ...   \n",
              "413         1305       3                            Spector, Mr. Woolf   \n",
              "414         1306       1                  Oliva y Ocana, Dona. Fermina   \n",
              "415         1307       3                  Saether, Mr. Simon Sivertsen   \n",
              "416         1308       3                           Ware, Mr. Frederick   \n",
              "417         1309       3                      Peter, Master. Michael J   \n",
              "\n",
              "        Sex   Age  SibSp  Parch              Ticket      Fare Cabin Embarked  \n",
              "0      male  34.5      0      0              330911    7.8292   NaN        Q  \n",
              "1    female  47.0      1      0              363272    7.0000   NaN        S  \n",
              "2      male  62.0      0      0              240276    9.6875   NaN        Q  \n",
              "3      male  27.0      0      0              315154    8.6625   NaN        S  \n",
              "4    female  22.0      1      1             3101298   12.2875   NaN        S  \n",
              "..      ...   ...    ...    ...                 ...       ...   ...      ...  \n",
              "413    male   NaN      0      0           A.5. 3236    8.0500   NaN        S  \n",
              "414  female  39.0      0      0            PC 17758  108.9000  C105        C  \n",
              "415    male  38.5      0      0  SOTON/O.Q. 3101262    7.2500   NaN        S  \n",
              "416    male   NaN      0      0              359309    8.0500   NaN        S  \n",
              "417    male   NaN      1      1                2668   22.3583   NaN        C  \n",
              "\n",
              "[418 rows x 11 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-237e05cc-c64f-45b1-af19-6c56ff3921e8\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>PassengerId</th>\n",
              "      <th>Pclass</th>\n",
              "      <th>Name</th>\n",
              "      <th>Sex</th>\n",
              "      <th>Age</th>\n",
              "      <th>SibSp</th>\n",
              "      <th>Parch</th>\n",
              "      <th>Ticket</th>\n",
              "      <th>Fare</th>\n",
              "      <th>Cabin</th>\n",
              "      <th>Embarked</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>892</td>\n",
              "      <td>3</td>\n",
              "      <td>Kelly, Mr. James</td>\n",
              "      <td>male</td>\n",
              "      <td>34.5</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>330911</td>\n",
              "      <td>7.8292</td>\n",
              "      <td>NaN</td>\n",
              "      <td>Q</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>893</td>\n",
              "      <td>3</td>\n",
              "      <td>Wilkes, Mrs. James (Ellen Needs)</td>\n",
              "      <td>female</td>\n",
              "      <td>47.0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>363272</td>\n",
              "      <td>7.0000</td>\n",
              "      <td>NaN</td>\n",
              "      <td>S</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>894</td>\n",
              "      <td>2</td>\n",
              "      <td>Myles, Mr. Thomas Francis</td>\n",
              "      <td>male</td>\n",
              "      <td>62.0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>240276</td>\n",
              "      <td>9.6875</td>\n",
              "      <td>NaN</td>\n",
              "      <td>Q</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>895</td>\n",
              "      <td>3</td>\n",
              "      <td>Wirz, Mr. Albert</td>\n",
              "      <td>male</td>\n",
              "      <td>27.0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>315154</td>\n",
              "      <td>8.6625</td>\n",
              "      <td>NaN</td>\n",
              "      <td>S</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>896</td>\n",
              "      <td>3</td>\n",
              "      <td>Hirvonen, Mrs. Alexander (Helga E Lindqvist)</td>\n",
              "      <td>female</td>\n",
              "      <td>22.0</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>3101298</td>\n",
              "      <td>12.2875</td>\n",
              "      <td>NaN</td>\n",
              "      <td>S</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>413</th>\n",
              "      <td>1305</td>\n",
              "      <td>3</td>\n",
              "      <td>Spector, Mr. Woolf</td>\n",
              "      <td>male</td>\n",
              "      <td>NaN</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>A.5. 3236</td>\n",
              "      <td>8.0500</td>\n",
              "      <td>NaN</td>\n",
              "      <td>S</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>414</th>\n",
              "      <td>1306</td>\n",
              "      <td>1</td>\n",
              "      <td>Oliva y Ocana, Dona. Fermina</td>\n",
              "      <td>female</td>\n",
              "      <td>39.0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>PC 17758</td>\n",
              "      <td>108.9000</td>\n",
              "      <td>C105</td>\n",
              "      <td>C</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>415</th>\n",
              "      <td>1307</td>\n",
              "      <td>3</td>\n",
              "      <td>Saether, Mr. Simon Sivertsen</td>\n",
              "      <td>male</td>\n",
              "      <td>38.5</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>SOTON/O.Q. 3101262</td>\n",
              "      <td>7.2500</td>\n",
              "      <td>NaN</td>\n",
              "      <td>S</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>416</th>\n",
              "      <td>1308</td>\n",
              "      <td>3</td>\n",
              "      <td>Ware, Mr. Frederick</td>\n",
              "      <td>male</td>\n",
              "      <td>NaN</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>359309</td>\n",
              "      <td>8.0500</td>\n",
              "      <td>NaN</td>\n",
              "      <td>S</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>417</th>\n",
              "      <td>1309</td>\n",
              "      <td>3</td>\n",
              "      <td>Peter, Master. Michael J</td>\n",
              "      <td>male</td>\n",
              "      <td>NaN</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>2668</td>\n",
              "      <td>22.3583</td>\n",
              "      <td>NaN</td>\n",
              "      <td>C</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>418 rows × 11 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-237e05cc-c64f-45b1-af19-6c56ff3921e8')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-237e05cc-c64f-45b1-af19-6c56ff3921e8 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-237e05cc-c64f-45b1-af19-6c56ff3921e8');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-b0a27bc0-90d7-4e9a-89c7-a993890f941e\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-b0a27bc0-90d7-4e9a-89c7-a993890f941e')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-b0a27bc0-90d7-4e9a-89c7-a993890f941e button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "  <div id=\"id_0f7f830f-068a-4a44-a4aa-626c0dd2390a\">\n",
              "    <style>\n",
              "      .colab-df-generate {\n",
              "        background-color: #E8F0FE;\n",
              "        border: none;\n",
              "        border-radius: 50%;\n",
              "        cursor: pointer;\n",
              "        display: none;\n",
              "        fill: #1967D2;\n",
              "        height: 32px;\n",
              "        padding: 0 0 0 0;\n",
              "        width: 32px;\n",
              "      }\n",
              "\n",
              "      .colab-df-generate:hover {\n",
              "        background-color: #E2EBFA;\n",
              "        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "        fill: #174EA6;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate {\n",
              "        background-color: #3B4455;\n",
              "        fill: #D2E3FC;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate:hover {\n",
              "        background-color: #434B5C;\n",
              "        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "        fill: #FFFFFF;\n",
              "      }\n",
              "    </style>\n",
              "    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('df1')\"\n",
              "            title=\"Generate code using this dataframe.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "    <script>\n",
              "      (() => {\n",
              "      const buttonEl =\n",
              "        document.querySelector('#id_0f7f830f-068a-4a44-a4aa-626c0dd2390a button.colab-df-generate');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      buttonEl.onclick = () => {\n",
              "        google.colab.notebook.generateWithVariable('df1');\n",
              "      }\n",
              "      })();\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "df1",
              "summary": "{\n  \"name\": \"df1\",\n  \"rows\": 418,\n  \"fields\": [\n    {\n      \"column\": \"PassengerId\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 120,\n        \"min\": 892,\n        \"max\": 1309,\n        \"num_unique_values\": 418,\n        \"samples\": [\n          1213,\n          1216,\n          1280\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Pclass\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 1,\n        \"max\": 3,\n        \"num_unique_values\": 3,\n        \"samples\": [\n          3,\n          2,\n          1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Name\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 418,\n        \"samples\": [\n          \"Krekorian, Mr. Neshan\",\n          \"Kreuchen, Miss. Emilie\",\n          \"Canavan, Mr. Patrick\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Sex\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          \"female\",\n          \"male\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Age\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 14.181209235624422,\n        \"min\": 0.17,\n        \"max\": 76.0,\n        \"num_unique_values\": 79,\n        \"samples\": [\n          10.0,\n          34.5\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"SibSp\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 8,\n        \"num_unique_values\": 7,\n        \"samples\": [\n          0,\n          1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Parch\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 9,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          1,\n          6\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Ticket\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 363,\n        \"samples\": [\n          \"2673\",\n          \"W./C. 6607\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Fare\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 55.907576179973844,\n        \"min\": 0.0,\n        \"max\": 512.3292,\n        \"num_unique_values\": 169,\n        \"samples\": [\n          41.5792,\n          57.75\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Cabin\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 76,\n        \"samples\": [\n          \"A21\",\n          \"E45\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Embarked\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 3,\n        \"samples\": [\n          \"Q\",\n          \"S\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 6
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df.head()"
      ],
      "metadata": {
        "id": "kabKfcxqM-wK",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 504
        },
        "outputId": "7c06d276-5fda-4a65-e5bc-88cc17d659f8"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "   PassengerId  Survived  Pclass  \\\n",
              "0            1         0       3   \n",
              "1            2         1       1   \n",
              "2            3         1       3   \n",
              "3            4         1       1   \n",
              "4            5         0       3   \n",
              "\n",
              "                                                Name     Sex   Age  SibSp  \\\n",
              "0                            Braund, Mr. Owen Harris    male  22.0      1   \n",
              "1  Cumings, Mrs. John Bradley (Florence Briggs Th...  female  38.0      1   \n",
              "2                             Heikkinen, Miss. Laina  female  26.0      0   \n",
              "3       Futrelle, Mrs. Jacques Heath (Lily May Peel)  female  35.0      1   \n",
              "4                           Allen, Mr. William Henry    male  35.0      0   \n",
              "\n",
              "   Parch            Ticket     Fare Cabin Embarked  \n",
              "0      0         A/5 21171   7.2500   NaN        S  \n",
              "1      0          PC 17599  71.2833   C85        C  \n",
              "2      0  STON/O2. 3101282   7.9250   NaN        S  \n",
              "3      0            113803  53.1000  C123        S  \n",
              "4      0            373450   8.0500   NaN        S  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-224f9bcf-39c5-4f11-94f8-42dd4b45111c\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>PassengerId</th>\n",
              "      <th>Survived</th>\n",
              "      <th>Pclass</th>\n",
              "      <th>Name</th>\n",
              "      <th>Sex</th>\n",
              "      <th>Age</th>\n",
              "      <th>SibSp</th>\n",
              "      <th>Parch</th>\n",
              "      <th>Ticket</th>\n",
              "      <th>Fare</th>\n",
              "      <th>Cabin</th>\n",
              "      <th>Embarked</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>3</td>\n",
              "      <td>Braund, Mr. Owen Harris</td>\n",
              "      <td>male</td>\n",
              "      <td>22.0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>A/5 21171</td>\n",
              "      <td>7.2500</td>\n",
              "      <td>NaN</td>\n",
              "      <td>S</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>2</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>Cumings, Mrs. John Bradley (Florence Briggs Th...</td>\n",
              "      <td>female</td>\n",
              "      <td>38.0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>PC 17599</td>\n",
              "      <td>71.2833</td>\n",
              "      <td>C85</td>\n",
              "      <td>C</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>3</td>\n",
              "      <td>1</td>\n",
              "      <td>3</td>\n",
              "      <td>Heikkinen, Miss. Laina</td>\n",
              "      <td>female</td>\n",
              "      <td>26.0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>STON/O2. 3101282</td>\n",
              "      <td>7.9250</td>\n",
              "      <td>NaN</td>\n",
              "      <td>S</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>4</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>Futrelle, Mrs. Jacques Heath (Lily May Peel)</td>\n",
              "      <td>female</td>\n",
              "      <td>35.0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>113803</td>\n",
              "      <td>53.1000</td>\n",
              "      <td>C123</td>\n",
              "      <td>S</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>5</td>\n",
              "      <td>0</td>\n",
              "      <td>3</td>\n",
              "      <td>Allen, Mr. William Henry</td>\n",
              "      <td>male</td>\n",
              "      <td>35.0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>373450</td>\n",
              "      <td>8.0500</td>\n",
              "      <td>NaN</td>\n",
              "      <td>S</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-224f9bcf-39c5-4f11-94f8-42dd4b45111c')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-224f9bcf-39c5-4f11-94f8-42dd4b45111c button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-224f9bcf-39c5-4f11-94f8-42dd4b45111c');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-db44325e-e787-4bc2-b92e-469b8eddb553\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-db44325e-e787-4bc2-b92e-469b8eddb553')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-db44325e-e787-4bc2-b92e-469b8eddb553 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "df",
              "summary": "{\n  \"name\": \"df\",\n  \"rows\": 891,\n  \"fields\": [\n    {\n      \"column\": \"PassengerId\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 257,\n        \"min\": 1,\n        \"max\": 891,\n        \"num_unique_values\": 891,\n        \"samples\": [\n          710,\n          440,\n          841\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Survived\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          1,\n          0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Pclass\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 1,\n        \"max\": 3,\n        \"num_unique_values\": 3,\n        \"samples\": [\n          3,\n          1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Name\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 891,\n        \"samples\": [\n          \"Moubarek, Master. Halim Gonios (\\\"William George\\\")\",\n          \"Kvillner, Mr. Johan Henrik Johannesson\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Sex\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          \"female\",\n          \"male\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Age\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 14.526497332334042,\n        \"min\": 0.42,\n        \"max\": 80.0,\n        \"num_unique_values\": 88,\n        \"samples\": [\n          0.75,\n          22.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"SibSp\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1,\n        \"min\": 0,\n        \"max\": 8,\n        \"num_unique_values\": 7,\n        \"samples\": [\n          1,\n          0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Parch\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 6,\n        \"num_unique_values\": 7,\n        \"samples\": [\n          0,\n          1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Ticket\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 681,\n        \"samples\": [\n          \"11774\",\n          \"248740\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Fare\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 49.6934285971809,\n        \"min\": 0.0,\n        \"max\": 512.3292,\n        \"num_unique_values\": 248,\n        \"samples\": [\n          11.2417,\n          51.8625\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Cabin\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 147,\n        \"samples\": [\n          \"D45\",\n          \"B49\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Embarked\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 3,\n        \"samples\": [\n          \"S\",\n          \"C\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 6
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df.tail()"
      ],
      "metadata": {
        "id": "EA6CTC-HM5XM",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 452
        },
        "outputId": "5930c675-8e1d-47e9-809f-cc756218ca44"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "     PassengerId  Survived  Pclass                                      Name  \\\n",
              "886          887         0       2                     Montvila, Rev. Juozas   \n",
              "887          888         1       1              Graham, Miss. Margaret Edith   \n",
              "888          889         0       3  Johnston, Miss. Catherine Helen \"Carrie\"   \n",
              "889          890         1       1                     Behr, Mr. Karl Howell   \n",
              "890          891         0       3                       Dooley, Mr. Patrick   \n",
              "\n",
              "        Sex   Age  SibSp  Parch      Ticket   Fare Cabin Embarked  \n",
              "886    male  27.0      0      0      211536  13.00   NaN        S  \n",
              "887  female  19.0      0      0      112053  30.00   B42        S  \n",
              "888  female   NaN      1      2  W./C. 6607  23.45   NaN        S  \n",
              "889    male  26.0      0      0      111369  30.00  C148        C  \n",
              "890    male  32.0      0      0      370376   7.75   NaN        Q  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-8d4826ba-45d8-42c4-8611-5a0d45c629e4\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>PassengerId</th>\n",
              "      <th>Survived</th>\n",
              "      <th>Pclass</th>\n",
              "      <th>Name</th>\n",
              "      <th>Sex</th>\n",
              "      <th>Age</th>\n",
              "      <th>SibSp</th>\n",
              "      <th>Parch</th>\n",
              "      <th>Ticket</th>\n",
              "      <th>Fare</th>\n",
              "      <th>Cabin</th>\n",
              "      <th>Embarked</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>886</th>\n",
              "      <td>887</td>\n",
              "      <td>0</td>\n",
              "      <td>2</td>\n",
              "      <td>Montvila, Rev. Juozas</td>\n",
              "      <td>male</td>\n",
              "      <td>27.0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>211536</td>\n",
              "      <td>13.00</td>\n",
              "      <td>NaN</td>\n",
              "      <td>S</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>887</th>\n",
              "      <td>888</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>Graham, Miss. Margaret Edith</td>\n",
              "      <td>female</td>\n",
              "      <td>19.0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>112053</td>\n",
              "      <td>30.00</td>\n",
              "      <td>B42</td>\n",
              "      <td>S</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>888</th>\n",
              "      <td>889</td>\n",
              "      <td>0</td>\n",
              "      <td>3</td>\n",
              "      <td>Johnston, Miss. Catherine Helen \"Carrie\"</td>\n",
              "      <td>female</td>\n",
              "      <td>NaN</td>\n",
              "      <td>1</td>\n",
              "      <td>2</td>\n",
              "      <td>W./C. 6607</td>\n",
              "      <td>23.45</td>\n",
              "      <td>NaN</td>\n",
              "      <td>S</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>889</th>\n",
              "      <td>890</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>Behr, Mr. Karl Howell</td>\n",
              "      <td>male</td>\n",
              "      <td>26.0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>111369</td>\n",
              "      <td>30.00</td>\n",
              "      <td>C148</td>\n",
              "      <td>C</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>890</th>\n",
              "      <td>891</td>\n",
              "      <td>0</td>\n",
              "      <td>3</td>\n",
              "      <td>Dooley, Mr. Patrick</td>\n",
              "      <td>male</td>\n",
              "      <td>32.0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>370376</td>\n",
              "      <td>7.75</td>\n",
              "      <td>NaN</td>\n",
              "      <td>Q</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-8d4826ba-45d8-42c4-8611-5a0d45c629e4')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-8d4826ba-45d8-42c4-8611-5a0d45c629e4 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-8d4826ba-45d8-42c4-8611-5a0d45c629e4');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-8aab9761-9e90-49b6-9bfd-cad800a42dd7\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-8aab9761-9e90-49b6-9bfd-cad800a42dd7')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-8aab9761-9e90-49b6-9bfd-cad800a42dd7 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "summary": "{\n  \"name\": \"df\",\n  \"rows\": 5,\n  \"fields\": [\n    {\n      \"column\": \"PassengerId\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1,\n        \"min\": 887,\n        \"max\": 891,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          888,\n          891,\n          889\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Survived\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          1,\n          0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Pclass\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1,\n        \"min\": 1,\n        \"max\": 3,\n        \"num_unique_values\": 3,\n        \"samples\": [\n          2,\n          1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Name\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 5,\n        \"samples\": [\n          \"Graham, Miss. Margaret Edith\",\n          \"Dooley, Mr. Patrick\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Sex\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          \"female\",\n          \"male\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Age\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 5.354126134736337,\n        \"min\": 19.0,\n        \"max\": 32.0,\n        \"num_unique_values\": 4,\n        \"samples\": [\n          19.0,\n          32.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"SibSp\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          1,\n          0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Parch\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 2,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          2,\n          0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Ticket\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 5,\n        \"samples\": [\n          \"112053\",\n          \"370376\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Fare\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 10.09253436952285,\n        \"min\": 7.75,\n        \"max\": 30.0,\n        \"num_unique_values\": 4,\n        \"samples\": [\n          30.0,\n          7.75\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Cabin\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          \"C148\",\n          \"B42\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Embarked\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 3,\n        \"samples\": [\n          \"S\",\n          \"C\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 7
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df.shape"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "9T3BzKZAVUcq",
        "outputId": "824f5016-7cdd-4693-d372-fd5c0baff207"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(891, 12)"
            ]
          },
          "metadata": {},
          "execution_count": 9
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df.isnull().sum()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 429
        },
        "id": "5QGw0qxGVZtR",
        "outputId": "fd72c4de-bf0b-4d3b-d2c8-42130de04539"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "PassengerId    0\n",
              "Survived       0\n",
              "Pclass         0\n",
              "Name           0\n",
              "Sex            0\n",
              "Age            0\n",
              "SibSp          0\n",
              "Parch          0\n",
              "Ticket         0\n",
              "Fare           0\n",
              "Embarked       0\n",
              "dtype: int64"
            ],
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>0</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>PassengerId</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Survived</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Pclass</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Name</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Sex</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Age</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>SibSp</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Parch</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Ticket</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Fare</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Embarked</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div><br><label><b>dtype:</b> int64</label>"
            ]
          },
          "metadata": {},
          "execution_count": 40
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df.describe()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 300
        },
        "id": "uQBMPD61VhRc",
        "outputId": "d2456cb1-bd65-411b-9a7c-70dd08fd2629"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "       PassengerId  Survived  Pclass  Sex  Age  SibSp  Parch  Fare  Embarked\n",
              "count          0.0       0.0     0.0  0.0  0.0    0.0    0.0   0.0       0.0\n",
              "mean           NaN       NaN     NaN  NaN  NaN    NaN    NaN   NaN       NaN\n",
              "std            NaN       NaN     NaN  NaN  NaN    NaN    NaN   NaN       NaN\n",
              "min            NaN       NaN     NaN  NaN  NaN    NaN    NaN   NaN       NaN\n",
              "25%            NaN       NaN     NaN  NaN  NaN    NaN    NaN   NaN       NaN\n",
              "50%            NaN       NaN     NaN  NaN  NaN    NaN    NaN   NaN       NaN\n",
              "75%            NaN       NaN     NaN  NaN  NaN    NaN    NaN   NaN       NaN\n",
              "max            NaN       NaN     NaN  NaN  NaN    NaN    NaN   NaN       NaN"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-3dec4ab5-2852-405d-9127-a4e43bfd6826\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>PassengerId</th>\n",
              "      <th>Survived</th>\n",
              "      <th>Pclass</th>\n",
              "      <th>Sex</th>\n",
              "      <th>Age</th>\n",
              "      <th>SibSp</th>\n",
              "      <th>Parch</th>\n",
              "      <th>Fare</th>\n",
              "      <th>Embarked</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>count</th>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>mean</th>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>std</th>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>min</th>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>25%</th>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>50%</th>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>75%</th>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>max</th>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-3dec4ab5-2852-405d-9127-a4e43bfd6826')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-3dec4ab5-2852-405d-9127-a4e43bfd6826 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-3dec4ab5-2852-405d-9127-a4e43bfd6826');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-7a68ad83-c491-4c64-9b36-7497030bfb49\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-7a68ad83-c491-4c64-9b36-7497030bfb49')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-7a68ad83-c491-4c64-9b36-7497030bfb49 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "summary": "{\n  \"name\": \"df\",\n  \"rows\": 8,\n  \"fields\": [\n    {\n      \"column\": \"PassengerId\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": null,\n        \"min\": 0.0,\n        \"max\": 0.0,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          0.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Survived\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": null,\n        \"min\": 0.0,\n        \"max\": 0.0,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          0.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Pclass\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": null,\n        \"min\": 0.0,\n        \"max\": 0.0,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          0.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Sex\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": null,\n        \"min\": 0.0,\n        \"max\": 0.0,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          0.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Age\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": null,\n        \"min\": 0.0,\n        \"max\": 0.0,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          0.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"SibSp\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": null,\n        \"min\": 0.0,\n        \"max\": 0.0,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          0.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Parch\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": null,\n        \"min\": 0.0,\n        \"max\": 0.0,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          0.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Fare\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": null,\n        \"min\": 0.0,\n        \"max\": 0.0,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          0.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Embarked\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": null,\n        \"min\": 0.0,\n        \"max\": 0.0,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          0.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 41
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# replacing missing values with the average in the columns(Data cleaning)\n",
        "\n",
        "df['Age'].fillna(df['Age'].median(), inplace = True)\n",
        "df['Fare'].fillna(df['Fare'].mean(), inplace = True)\n",
        "df['Embarked'].fillna(df['Embarked'].mode(), inplace = True)\n",
        "df.dropna(inplace = True)\n",
        "df['Sex'] = df['Sex'].map({'male': 0, 'female': 1})\n",
        "df['Embarked'] = df['Embarked'].map({'C': 0, 'Q': 1, 'S': 2})\n"
      ],
      "metadata": {
        "id": "gFiIif89Vxx3"
      },
      "execution_count": 5,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "#summary\n",
        "df.describe()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 300
        },
        "id": "lD7lFt0CEUhV",
        "outputId": "362970be-57a5-44ac-8bb6-e0cff94e11a6"
      },
      "execution_count": 6,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "       PassengerId    Survived      Pclass         Sex         Age  \\\n",
              "count   202.000000  202.000000  202.000000  202.000000  202.000000   \n",
              "mean    455.495050    0.663366    1.198020    0.470297   34.952574   \n",
              "std     249.704228    0.473732    0.528205    0.500357   15.054584   \n",
              "min       2.000000    0.000000    1.000000    0.000000    0.920000   \n",
              "25%     263.250000    0.000000    1.000000    0.000000   25.000000   \n",
              "50%     457.500000    1.000000    1.000000    0.000000   33.500000   \n",
              "75%     681.500000    1.000000    1.000000    1.000000   46.750000   \n",
              "max     890.000000    1.000000    3.000000    1.000000   80.000000   \n",
              "\n",
              "            SibSp       Parch        Fare    Embarked  \n",
              "count  202.000000  202.000000  202.000000  202.000000  \n",
              "mean     0.445545    0.440594   76.103301    1.297030  \n",
              "std      0.630490    0.732294   74.759941    0.946789  \n",
              "min      0.000000    0.000000    0.000000    0.000000  \n",
              "25%      0.000000    0.000000   28.959375    0.000000  \n",
              "50%      0.000000    0.000000   55.000000    2.000000  \n",
              "75%      1.000000    1.000000   89.776050    2.000000  \n",
              "max      3.000000    4.000000  512.329200    2.000000  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-68809728-bca4-49d2-9f7d-4a7432307196\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>PassengerId</th>\n",
              "      <th>Survived</th>\n",
              "      <th>Pclass</th>\n",
              "      <th>Sex</th>\n",
              "      <th>Age</th>\n",
              "      <th>SibSp</th>\n",
              "      <th>Parch</th>\n",
              "      <th>Fare</th>\n",
              "      <th>Embarked</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>count</th>\n",
              "      <td>202.000000</td>\n",
              "      <td>202.000000</td>\n",
              "      <td>202.000000</td>\n",
              "      <td>202.000000</td>\n",
              "      <td>202.000000</td>\n",
              "      <td>202.000000</td>\n",
              "      <td>202.000000</td>\n",
              "      <td>202.000000</td>\n",
              "      <td>202.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>mean</th>\n",
              "      <td>455.495050</td>\n",
              "      <td>0.663366</td>\n",
              "      <td>1.198020</td>\n",
              "      <td>0.470297</td>\n",
              "      <td>34.952574</td>\n",
              "      <td>0.445545</td>\n",
              "      <td>0.440594</td>\n",
              "      <td>76.103301</td>\n",
              "      <td>1.297030</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>std</th>\n",
              "      <td>249.704228</td>\n",
              "      <td>0.473732</td>\n",
              "      <td>0.528205</td>\n",
              "      <td>0.500357</td>\n",
              "      <td>15.054584</td>\n",
              "      <td>0.630490</td>\n",
              "      <td>0.732294</td>\n",
              "      <td>74.759941</td>\n",
              "      <td>0.946789</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>min</th>\n",
              "      <td>2.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.920000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>25%</th>\n",
              "      <td>263.250000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>25.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>28.959375</td>\n",
              "      <td>0.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>50%</th>\n",
              "      <td>457.500000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>33.500000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>55.000000</td>\n",
              "      <td>2.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>75%</th>\n",
              "      <td>681.500000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>46.750000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>89.776050</td>\n",
              "      <td>2.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>max</th>\n",
              "      <td>890.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>3.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>80.000000</td>\n",
              "      <td>3.000000</td>\n",
              "      <td>4.000000</td>\n",
              "      <td>512.329200</td>\n",
              "      <td>2.000000</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-68809728-bca4-49d2-9f7d-4a7432307196')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-68809728-bca4-49d2-9f7d-4a7432307196 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-68809728-bca4-49d2-9f7d-4a7432307196');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-ed6ba29c-1f36-4ef7-a5cf-2d79ce8cc863\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-ed6ba29c-1f36-4ef7-a5cf-2d79ce8cc863')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-ed6ba29c-1f36-4ef7-a5cf-2d79ce8cc863 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "summary": "{\n  \"name\": \"df\",\n  \"rows\": 8,\n  \"fields\": [\n    {\n      \"column\": \"PassengerId\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 284.008380046864,\n        \"min\": 2.0,\n        \"max\": 890.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          455.4950495049505,\n          457.5,\n          202.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Survived\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 71.21005300204565,\n        \"min\": 0.0,\n        \"max\": 202.0,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          0.6633663366336634,\n          1.0,\n          0.47373245850820106\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Pclass\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 70.9809043732544,\n        \"min\": 0.5282054850451682,\n        \"max\": 202.0,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          1.198019801980198,\n          3.0,\n          0.5282054850451682\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Sex\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 71.26895778854988,\n        \"min\": 0.0,\n        \"max\": 202.0,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          0.47029702970297027,\n          1.0,\n          0.5003569978173238\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Age\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 63.90403415867557,\n        \"min\": 0.92,\n        \"max\": 202.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          34.952574257425745,\n          33.5,\n          202.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"SibSp\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 71.16834722564758,\n        \"min\": 0.0,\n        \"max\": 202.0,\n        \"num_unique_values\": 6,\n        \"samples\": [\n          202.0,\n          0.44554455445544555,\n          3.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Parch\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 71.11834851325345,\n        \"min\": 0.0,\n        \"max\": 202.0,\n        \"num_unique_values\": 6,\n        \"samples\": [\n          202.0,\n          0.4405940594059406,\n          4.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Fare\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 165.4724689492812,\n        \"min\": 0.0,\n        \"max\": 512.3292,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          76.10330099009902,\n          55.0,\n          202.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Embarked\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 71.00630836403613,\n        \"min\": 0.0,\n        \"max\": 202.0,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          1.297029702970297,\n          2.0,\n          0.9467888063815835\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 6
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Visualization distributions\n",
        "plt.figure(figsize=(10,5))\n",
        "plt.hist(df['Age'] , bins =30, edgecolor = 'black')\n",
        "plt.xlabel('Age')\n",
        "plt.ylabel('Frequency')\n",
        "plt.title('Distribution of Age')\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 487
        },
        "id": "EA7XGCfVlaak",
        "outputId": "26f218ce-c671-4222-febc-21c17733f578"
      },
      "execution_count": 8,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1000x500 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "plt.figure(figsize=(10,5))\n",
        "sns.countplot(x ='Sex', data = df)\n",
        "plt.xlabel('Sex')\n",
        "plt.ylabel('Count')\n",
        "plt.title('Distribution of Sex')\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 487
        },
        "id": "aVPJRSG6meIE",
        "outputId": "cf2aed81-6f9c-4539-c3d0-821785904475"
      },
      "execution_count": 9,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1000x500 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "plt.figure(figsize=(10,5))\n",
        "sns.countplot(x ='Survived', data = df)\n",
        "plt.xlabel('Survived')\n",
        "plt.ylabel('Count')\n",
        "plt.title('Distribution of Survival')\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 487
        },
        "id": "X7ROPPCum-pS",
        "outputId": "62315cef-5b65-488c-b591-1fb21339fc4c"
      },
      "execution_count": 10,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1000x500 with 1 Axes>"
            ],
            "image/png": "iVBORw0KGgoAAAANSUhEUgAAA1IAAAHWCAYAAAB9mLjgAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjcuMSwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy/bCgiHAAAACXBIWXMAAA9hAAAPYQGoP6dpAAA1aUlEQVR4nO3de1xVVf7/8fdBBLxwEU0ONIhkjrdKTY1QJy9RqGlaVOIwpo7pfE0zpSmjvKRT2VVJpZj6Tt5SU5sks7QMUrugGY46mdfyQilQGSCaiLB/f/TzfDsBykL0HOD1fDz249Fea+21Pwd7iO/H3msdm2VZlgAAAAAAFebh6gIAAAAAoLohSAEAAACAIYIUAAAAABgiSAEAAACAIYIUAAAAABgiSAEAAACAIYIUAAAAABgiSAEAAACAIYIUAAAAABgiSAFADfHEE0/IZrNdlnv17NlTPXv2dJxv2LBBNptNb7311mW5//Dhw9W8efPLcq/KKigo0H333Se73S6bzaYJEya4uiQjhw4dks1m04IFCy7ZPS7n/7MAUNUIUgDghhYsWCCbzeY4fHx8FBISoujoaM2ZM0cnTpyokvscPXpUTzzxhLZv314l81Uld66tIp5++mktWLBAY8aM0eLFizV06NByx545c0YvvfSSOnbsKD8/PwUEBKhdu3YaPXq09uzZcxmrBgBUlKerCwAAlG/GjBkKDw9XUVGRsrKytGHDBk2YMEGzZs3S6tWrdd111znGTp48WY8++qjR/EePHtX06dPVvHlzdejQocLXffjhh0b3qYzz1fbaa6+ppKTkktdwMdLS0nTjjTdq2rRpFxwbExOjtWvXasiQIRo1apSKioq0Z88erVmzRl27dlXr1q0vQ8XOwsLC9Msvv6hu3bqX/d4AUB0QpADAjfXt21edO3d2nCckJCgtLU39+/fX7bffrt27d6tevXqSJE9PT3l6Xtq/1k+dOqX69evLy8vrkt7nQqrDP+5zcnLUtm3bC47bunWr1qxZo6eeekqPPfaYU9+8efOUm5tbJfWUlJTozJkz8vHxqdD4c09CAQBl49U+AKhmevfurSlTpujw4cN64403HO1lrTdZv369unfvroCAADVs2FCtWrVy/GN9w4YN6tKliyRpxIgRjtcIz62J6dmzp6655hplZGTopptuUv369R3X/n6N1DnFxcV67LHHZLfb1aBBA91+++3KzMx0GtO8eXMNHz681LW/nfNCtZW1RurkyZN66KGHFBoaKm9vb7Vq1UovvPCCLMtyGmez2TRu3DilpKTommuukbe3t9q1a6d169aV/QP/nZycHI0cOVJBQUHy8fFR+/bttXDhQkf/ufViBw8e1Hvvveeo/dChQ2XO980330iSunXrVqqvTp06aty4seO8vLVhZf3Zn/ucS5YsUbt27eTt7a13331XgYGBGjFiRKk58vPz5ePjo7///e+SSq+ReuGFF2Sz2XT48OFS1yYkJMjLy0s///yzJOmTTz7R3XffrWbNmsnb21uhoaGaOHGifvnllzJ/BgBQHRGkAKAaOrfe5nyv2O3atUv9+/dXYWGhZsyYoRdffFG33367PvvsM0lSmzZtNGPGDEnS6NGjtXjxYi1evFg33XSTY46ffvpJffv2VYcOHZSYmKhevXqdt66nnnpK7733niZNmqTx48dr/fr1ioqKMv4HdEVq+y3LsnT77bdr9uzZ6tOnj2bNmqVWrVrp4YcfVnx8fKnxn376qe6//37Fxsbqueee0+nTpxUTE6OffvrpvHX98ssv6tmzpxYvXqy4uDg9//zz8vf31/Dhw/XSSy85al+8eLGaNGmiDh06OGq/4oorypwzLCxMkrRkyRKdPXu2wj+jikhLS9PEiRM1ePBgvfTSS2rZsqXuuOMOpaSk6MyZM05jU1JSVFhYqNjY2DLnuueee2Sz2bRixYpSfStWrNCtt96qRo0aSZJWrlypU6dOacyYMZo7d66io6M1d+5c3XvvvVX6+QDApSwAgNuZP3++JcnaunVruWP8/f2tjh07Os6nTZtm/fav9dmzZ1uSrB9++KHcObZu3WpJsubPn1+qr0ePHpYkKzk5ucy+Hj16OM4//vhjS5J15ZVXWvn5+Y72FStWWJKsl156ydEWFhZmDRs27IJznq+2YcOGWWFhYY7zlJQUS5L15JNPOo276667LJvNZh04cMDRJsny8vJyatuxY4clyZo7d26pe/1WYmKiJcl64403HG1nzpyxIiMjrYYNGzp99rCwMOu2224773yWZVklJSWOn3VQUJA1ZMgQKykpyTp8+PAFP/c5v/+zP/c5PTw8rF27djm1f/DBB5Yk691333Vq79evn3XVVVc5zg8ePFjq5x8ZGWl16tTJ6bovvvjCkmQtWrTI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\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Explore relationships between variables\n",
        "plt.figure(figsize=(10,5))\n",
        "sns.barplot(x ='Sex', y = 'Survived', data = df)\n",
        "plt.xlabel('Sex')\n",
        "plt.ylabel('Survival Rate')\n",
        "plt.title('Survival Rate by Sex')\n",
        "plt.show()\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 487
        },
        "id": "OqbmGxYznPV2",
        "outputId": "2caee049-2b66-4493-ec42-77d9d683c791"
      },
      "execution_count": 11,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1000x500 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "plt.figure(figsize=(10,5))\n",
        "sns.histplot(x ='Age', hue ='Survived', multiple= 'stack', bins=30,  data = df)\n",
        "plt.xlabel('Age')\n",
        "plt.ylabel('Count')\n",
        "plt.title('Survival Rate by Age')\n",
        "plt.show()\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 487
        },
        "id": "KuybnR6Orf7H",
        "outputId": "f5bf6440-a8f2-444a-a70b-994c7ce9c66b"
      },
      "execution_count": 13,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1000x500 with 1 Axes>"
            ],
            "image/png": "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p9Nr265du/Tcc89p/fr1uvbaaxUfH+/pyXxk8ejRo547GZ5mxWsHAH/D6XYAUAmtXr1ahmGUWf/xxx9Lkpo2bSrp5+tanE5nmetCyvMdQf3791dAQIDeffddLViwQDfffPN5fYdStWrVdPvtt2vp0qX6xz/+oeLi4jKn2gUEBEiS12vatGmTNmzYcMF9nktkZKQeeOABrVixwnPXvDONnZOTo5kzZ5Z5fo0aNcoETunna4U2bNigFStWlNmWnZ2t4uLiX+3txx9/1KJFizzLubm5+vvf/642bdp4vvhV+vkUxkGDBmn+/PmaNWuWWrZsqVatWv1q/dmzZ6thw4Z68MEHdfvtt3s9fve736lmzZqeU+5uuOEGBQYGlrkN+ltvvWXLawcAf8ORJACohB555BHl5+frtttuU1JSkoqKivTFF19o3rx5SkhI8PpuohEjRujll1/WiBEj1L59e61bt85zhOJCREdHq2vXrnrttdd0/PjxMkHnXAYMGKA333xT48aNU8uWLdWsWTOv7TfffLMWLlyo2267TX369FFGRoamT5+u5s2b68SJExfc67mMHj1aU6dO1csvv6z33ntPPXr0UFBQkG655RY98MADOnHihN5++21FR0d7jsid1q5dO6WmpmrixIlq1KiRoqOj1a1bN/3+97/XkiVLdPPNN2vYsGFq166d8vLy9PXXX+v999/X/v37yxy9+aUmTZro3nvv1ebNm1WvXj3NmDFDhw4dOmNYO32r7dWrV5/XKY8//vijVq9erUcfffSM24ODg9WzZ08tWLBAb7zxhurVq6fRo0drypQp+s1vfqObbrpJ27Zt07Jly+R0Or2Odlnx2gHA7/j03noAgDNatmyZMXz4cCMpKcmoWbOmERQUZDRq1Mh45JFHjEOHDnntm5+fb9x7771GRESEUatWLePOO+80Dh8+fNZbgB85cuSs47799tuGJKNWrVpGQUFBme2/vAX4aaWlpUaDBg0MScbEiRPPuP0Pf/iDER8fbwQHBxtXXnml8dFHH52x3i/7PpPTtwB/9dVXz7h92LBhRkBAgLF3717DMAxjyZIlRqtWrYyQkBAjISHBmDx5sjFjxgxDkpGRkeF53sGDB40+ffoYtWrVMiR53Q78+PHjRkpKitGoUSMjKCjIcDqdxjXXXGP88Y9/LHNr9l+Kj483+vTpY6xYscJo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\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "plt.figure(figsize=(10,5))\n",
        "sns.barplot(x ='Pclass', y = 'Survived', data = df)\n",
        "plt.xlabel('Pclass')\n",
        "plt.ylabel('Survival Rate')\n",
        "plt.title('Survival Rate by Pclass')\n",
        "plt.show()\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 487
        },
        "id": "fGFXABwjsjeP",
        "outputId": "92e8c92c-9c4c-4ca0-9e80-8cbdf164d229"
      },
      "execution_count": 15,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1000x500 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#Correlation heatmap\n",
        "correlation_matrix = df.select_dtypes(include=np.number).corr()\n",
        "plt.figure(figsize=(10, 8))\n",
        "sns.heatmap(correlation_matrix, annot=True, cmap='coolwarm', fmt='.2f')\n",
        "plt.title('Correlation Matrix')\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 699
        },
        "id": "KtxWCuKAs4dT",
        "outputId": "dac86612-7b74-4c72-c75c-ca5a7e97b8c3"
      },
      "execution_count": 6,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1000x800 with 2 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    }
  ]
}